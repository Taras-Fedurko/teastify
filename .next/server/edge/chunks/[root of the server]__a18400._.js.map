{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/modules/auth/auth.schema.ts"],"sourcesContent":["// @verified\nimport * as z from 'zod';\n\nconst emailSchema = z.string().email({ message: 'Please enter a valid email address' });\nconst passwordSchema = z.string().min(7, { message: 'Password is required' });\n\nexport const ForgotPasswordSchema = z.object({\n  email: emailSchema,\n});\n\nexport const ResetPasswordSchema = z\n  .object({\n    password: passwordSchema,\n    confirmPassword: passwordSchema,\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: ['confirmPassword'],\n  });\n\nexport const LoginSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, { message: 'Password is required' }),\n});\n\nexport const SignupSchema = z.object({\n  name: z.string(),\n  email: emailSchema,\n  password: passwordSchema,\n});\n\nexport const MagicSignInSchema = z.object({\n  email: emailSchema,\n});\n\nexport type MagicSignInType = z.infer<typeof MagicSignInSchema>;\nexport type ForgotPasswordSchemaType = z.infer<typeof ForgotPasswordSchema>;\nexport type LoginSchemaType = z.infer<typeof LoginSchema>;\nexport type SignupSchemaType = z.infer<typeof SignupSchema>;\nexport type ResetPasswordSchemaType = z.infer<typeof ResetPasswordSchema>;\n"],"names":[],"mappings":"AAAA,YAAY;;;;;;;;AACZ;;AAEA,MAAM,cAAc,qIAAE,MAAM,GAAG,KAAK,CAAC;IAAE,SAAS;AAAqC;AACrF,MAAM,iBAAiB,qIAAE,MAAM,GAAG,GAAG,CAAC,GAAG;IAAE,SAAS;AAAuB;AAEpE,MAAM,uBAAuB,qIAAE,MAAM,CAAC;IAC3C,OAAO;AACT;AAEO,MAAM,sBAAsB,qIAChC,MAAM,CAAC;IACN,UAAU;IACV,iBAAiB;AACnB,GACC,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IACxD,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAEK,MAAM,cAAc,qIAAE,MAAM,CAAC;IAClC,OAAO;IACP,UAAU,qIAAE,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAuB;AAChE;AAEO,MAAM,eAAe,qIAAE,MAAM,CAAC;IACnC,MAAM,qIAAE,MAAM;IACd,OAAO;IACP,UAAU;AACZ;AAEO,MAAM,oBAAoB,qIAAE,MAAM,CAAC;IACxC,OAAO;AACT"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,IAAI,6IAAA,CAAA,eAAY;IAClC;IACA,SAAS,OAAO,MAAM;AACxB;uCAEe"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/modules/auth/data/user.ts"],"sourcesContent":["import prisma from '@/lib/prisma';\n\nclass UserRepository {\n  async getUserByEmail(email: string) {\n    try {\n      return await prisma.user.findUnique({\n        where: { email },\n      });\n    } catch (error) {\n      console.error('Error fetching user by email:', error);\n      throw new Error('Could not fetch user by email');\n    }\n  }\n\n  async getUserById(id: string) {\n    try {\n      return await prisma.user.findUnique({\n        where: { id },\n      });\n    } catch (error) {\n      console.error('Error fetching user by ID:', error);\n      throw new Error('Could not fetch user by ID');\n    }\n  }\n  async verifyUserEmail(id : string){\n    await prisma.user.update({\n      where: { id },\n      data: {\n        emailVerified: new Date(),\n      },\n    });\n  }\n\n}\n\nconst userRepository = new UserRepository();\nexport default userRepository;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACJ,MAAM,eAAe,KAAa,EAAE;QAClC,IAAI;YACF,OAAO,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE;gBAAM;YACjB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,YAAY,EAAU,EAAE;QAC5B,IAAI;YACF,OAAO,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE;gBAAG;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM,IAAI,MAAM;QAClB;IACF;IACA,MAAM,gBAAgB,EAAW,EAAC;QAChC,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,eAAe,IAAI;YACrB;QACF;IACF;AAEF;AAEA,MAAM,iBAAiB,IAAI;uCACZ"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/modules/auth/auth.config.ts"],"sourcesContent":["// @verified\nimport type { NextAuthConfig } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport Google from \"next-auth/providers/google\";\n\nimport { LoginSchema } from \"./auth.schema\";\nimport userRepository from \"./data/user\";\n\nexport default {\n  trustHost : true,\n  providers: [\n    Credentials({\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        const validate = await LoginSchema.parseAsync(credentials);\n\n        if (!validate) {\n          return null;\n        }\n\n        const { email, password } = validate;\n\n        const user = await userRepository.getUserByEmail(email);\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const matched = await bcrypt.compare(password, user.password);\n\n        if (matched) {\n          return user;\n        }\n\n        return null;\n      },\n    }),\n    Google({\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      clientId: process.env.GOOGLE_CLIENT_ID,\n    }),\n  ],\n} satisfies NextAuthConfig;\n\ntype ProvidersUsed = 'credentials' | 'google';\n\nexport type availableProviders = (ProvidersUsed)[number];\n"],"names":[],"mappings":"AAAA,YAAY;;;;AAEZ;AACA;AACA;AAEA;AACA;AALA;AAEA;;;;;;uCAKe;IACb,WAAY;IACZ,WAAW;QACT,CAAA,GAAA,0LAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,WAAW,MAAM,iIAAA,CAAA,cAAW,CAAC,UAAU,CAAC;gBAE9C,IAAI,CAAC,UAAU;oBACb,OAAO;gBACT;gBAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAE5B,MAAM,OAAO,MAAM,+HAAA,CAAA,UAAc,CAAC,cAAc,CAAC;gBAEjD,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,UAAU,MAAM,0IAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;gBAE5D,IAAI,SAAS;oBACX,OAAO;gBACT;gBAEA,OAAO;YACT;QACF;QACA,CAAA,GAAA,qLAAA,CAAA,UAAM,AAAD,EAAE;YACL,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,UAAU,QAAQ,GAAG,CAAC,gBAAgB;QACxC;KACD;AACH"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/routes.ts"],"sourcesContent":["/**\n * Map of all routes\n * @type {Record<string, string | Record<string, string>>}\n */\nexport const routes = {\n  landing: '/',\n\n  auth: {\n    signIn: '/sign-in',\n    signUp: '/sign-up',\n    signOut: '/sign-out',\n    forgorPassword: '/forgot-password',\n    newPassword: '/new-password',\n    emailVerify: \"/email-verify\",\n    verifyRequest: \"/verify-request\",\n    authError: \"/auth-error\", \n  },\n\n  dashboard: '/dashboard',\n\n  project: {\n    projects: 'project',\n    project: '/project/:projectId',\n    new: '/project-new',\n    posts: '/project/:projectId/posts',\n    postNew: '/project/:projectId/posts/new',\n    settings: '/project/:projectId/settings',\n    team: '/project/:projectId/settings/team',\n    // billing: '/project/:projectId/settings/billing',\n    // limits: '/project/:projectId/settings/limits',\n  }\n}\n\n/**\n * Routes accessible to the public are listed here in an array \n * @type {string[]}\n */\nexport const publicRoutes: string[] = [\n  routes.landing,\n ];\n \n/**\n * Routes for authentication are listed here in an array\n * @type {string[]} \n */\nexport const authRoutes: string[] = [\n  routes.auth.signIn,\n  routes.auth.signUp,\n  routes.auth.forgorPassword,\n  routes.auth.newPassword,\n  routes.auth.emailVerify,\n  routes.auth.verifyRequest,\n  routes.auth.authError,\n];\n \n /**\n  * Routes start with the api/auth are used for api auth purpose \n  * @type {string} \n  */\n export const apiAuthPrefix: string = '/api/auth';\n\n /**\n  * The default route to redirect to after login\n  */\n export const DEFAULT_LOGIN_REDIRECT = routes.dashboard;\n \n/**\n * \n * @param route helper to create routes mased on match params \n * @param params \n * @returns route\n */\nconst matchParams = (route: string, params: Record<string, string>): string => {\n  return Object.keys(params).reduce((path, key) => {\n    const regex = new RegExp(`:${key}`, 'g');\n    return path.replace(regex, params[key]);\n  }, route);\n};\n\n/**\n * Returm projest route\n * @param projectId \n * @returns \n */\nexport const getProjectRoute = (projectId: string): string => {\n  return matchParams(routes.project.project, { projectId });\n}\n\n/**\n * Return project post route\n * @param projectId \n * @returns \n */\nexport const getProjectPostsRoute = (projectId: string) => {\n  return matchParams(routes.project.posts, { projectId });\n}\n\n/**\n * Route to create new post\n * @param projectId \n * @returns \n */\nexport const getProjectPostsNewRoute = (projectId: string) => {\n  return matchParams(routes.project.postNew, { projectId });\n}\n\n/**\n* Returm projest setting route\n * @param projectId \n * @returns \n */\nexport const getProjectSettingRoute = (projectId: string): string => {\n  return matchParams(routes.project.settings, { projectId });\n}\n\n/**\n* Returm projest setting route\n * @param projectId \n * @returns \n */\nexport const getProjectTeamRoute = (projectId: string): string => {\n  return matchParams(routes.project.team, { projectId });\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;;AACM,MAAM,SAAS;IACpB,SAAS;IAET,MAAM;QACJ,QAAQ;QACR,QAAQ;QACR,SAAS;QACT,gBAAgB;QAChB,aAAa;QACb,aAAa;QACb,eAAe;QACf,WAAW;IACb;IAEA,WAAW;IAEX,SAAS;QACP,UAAU;QACV,SAAS;QACT,KAAK;QACL,OAAO;QACP,SAAS;QACT,UAAU;QACV,MAAM;IAGR;AACF;AAMO,MAAM,eAAyB;IACpC,OAAO,OAAO;CACd;AAMK,MAAM,aAAuB;IAClC,OAAO,IAAI,CAAC,MAAM;IAClB,OAAO,IAAI,CAAC,MAAM;IAClB,OAAO,IAAI,CAAC,cAAc;IAC1B,OAAO,IAAI,CAAC,WAAW;IACvB,OAAO,IAAI,CAAC,WAAW;IACvB,OAAO,IAAI,CAAC,aAAa;IACzB,OAAO,IAAI,CAAC,SAAS;CACtB;AAMO,MAAM,gBAAwB;AAK9B,MAAM,yBAAyB,OAAO,SAAS;AAEvD;;;;;CAKC,GACD,MAAM,cAAc,CAAC,OAAe;IAClC,OAAO,OAAO,IAAI,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM;QACvC,MAAM,QAAQ,IAAI,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE;QACpC,OAAO,KAAK,OAAO,CAAC,OAAO,MAAM,CAAC,IAAI;IACxC,GAAG;AACL;AAOO,MAAM,kBAAkB,CAAC;IAC9B,OAAO,YAAY,OAAO,OAAO,CAAC,OAAO,EAAE;QAAE;IAAU;AACzD;AAOO,MAAM,uBAAuB,CAAC;IACnC,OAAO,YAAY,OAAO,OAAO,CAAC,KAAK,EAAE;QAAE;IAAU;AACvD;AAOO,MAAM,0BAA0B,CAAC;IACtC,OAAO,YAAY,OAAO,OAAO,CAAC,OAAO,EAAE;QAAE;IAAU;AACzD;AAOO,MAAM,yBAAyB,CAAC;IACrC,OAAO,YAAY,OAAO,OAAO,CAAC,QAAQ,EAAE;QAAE;IAAU;AAC1D;AAOO,MAAM,sBAAsB,CAAC;IAClC,OAAO,YAAY,OAAO,OAAO,CAAC,IAAI,EAAE;QAAE;IAAU;AACtD"}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["// @verified\nimport NextAuth from \"next-auth\";\n\nimport authConfig from \"./modules/auth/auth.config\";\nimport {\n  apiAuthPrefix,\n  authRoutes,\n  DEFAULT_LOGIN_REDIRECT,\n  publicRoutes,\n  routes,\n} from \"./routes\";\n\n\nconst { auth } = NextAuth(authConfig);\n\nexport default auth((req) => {  \n  const isLoggedIn = !!req.auth;\n\n  const { nextUrl } = req;\n  \n  const isApiAuth = nextUrl.pathname.startsWith(apiAuthPrefix);\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\n  \n  if (isApiAuth) {\n    return;\n  }\n  \n  if (isAuthRoute) {\n    if (isLoggedIn) {\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\n    }\n\n    return;\n  }\n  \n  if (!isLoggedIn && !isPublicRoute) {\n    return Response.redirect(new URL(routes.auth.signIn, nextUrl));\n  }\n  \n  return;\n});\n\nexport const config = {\n  matcher: [\"/((?!.*\\\\..*|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n"],"names":[],"mappings":"AAAA,YAAY;;;;;AACZ;AAEA;AACA;AAHA;;;;AAYA,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE,iIAAA,CAAA,UAAU;uCAErB,KAAK,CAAC;IACnB,MAAM,aAAa,CAAC,CAAC,IAAI,IAAI;IAE7B,MAAM,EAAE,OAAO,EAAE,GAAG;IAEpB,MAAM,YAAY,QAAQ,QAAQ,CAAC,UAAU,CAAC,sGAAA,CAAA,gBAAa;IAC3D,MAAM,gBAAgB,sGAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,QAAQ,QAAQ;IAC5D,MAAM,cAAc,sGAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,QAAQ,QAAQ;IAExD,IAAI,WAAW;QACb;IACF;IAEA,IAAI,aAAa;QACf,IAAI,YAAY;YACd,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,sGAAA,CAAA,yBAAsB,EAAE;QAC3D;QAEA;IACF;IAEA,IAAI,CAAC,cAAc,CAAC,eAAe;QACjC,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,sGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,EAAE;IACvD;IAEA;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA0B;QAAK;KAAkB;AAC7D"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}