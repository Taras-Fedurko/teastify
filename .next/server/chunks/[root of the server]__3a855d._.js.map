{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/routes.ts"],"sourcesContent":["/**\n * Map of all routes\n * @type {Record<string, string | Record<string, string>>}\n */\nexport const routes = {\n  landing: '/',\n\n  auth: {\n    signIn: '/sign-in',\n    signUp: '/sign-up',\n    signOut: '/sign-out',\n    forgorPassword: '/forgot-password',\n    newPassword: '/new-password',\n    emailVerify: \"/email-verify\",\n    verifyRequest: \"/verify-request\",\n    authError: \"/auth-error\", \n  },\n\n  dashboard: '/dashboard',\n\n  project: {\n    projects: 'project',\n    project: '/project/:projectId',\n    new: '/project-new',\n    posts: '/project/:projectId/posts',\n    postNew: '/project/:projectId/posts/new',\n    settings: '/project/:projectId/settings',\n    team: '/project/:projectId/settings/team',\n    // billing: '/project/:projectId/settings/billing',\n    // limits: '/project/:projectId/settings/limits',\n  }\n}\n\n/**\n * Routes accessible to the public are listed here in an array \n * @type {string[]}\n */\nexport const publicRoutes: string[] = [\n  routes.landing,\n ];\n \n/**\n * Routes for authentication are listed here in an array\n * @type {string[]} \n */\nexport const authRoutes: string[] = [\n  routes.auth.signIn,\n  routes.auth.signUp,\n  routes.auth.forgorPassword,\n  routes.auth.newPassword,\n  routes.auth.emailVerify,\n  routes.auth.verifyRequest,\n  routes.auth.authError,\n];\n \n /**\n  * Routes start with the api/auth are used for api auth purpose \n  * @type {string} \n  */\n export const apiAuthPrefix: string = '/api/auth';\n\n /**\n  * The default route to redirect to after login\n  */\n export const DEFAULT_LOGIN_REDIRECT = routes.dashboard;\n \n/**\n * \n * @param route helper to create routes mased on match params \n * @param params \n * @returns route\n */\nconst matchParams = (route: string, params: Record<string, string>): string => {\n  return Object.keys(params).reduce((path, key) => {\n    const regex = new RegExp(`:${key}`, 'g');\n    return path.replace(regex, params[key]);\n  }, route);\n};\n\n/**\n * Returm projest route\n * @param projectId \n * @returns \n */\nexport const getProjectRoute = (projectId: string): string => {\n  return matchParams(routes.project.project, { projectId });\n}\n\n/**\n * Return project post route\n * @param projectId \n * @returns \n */\nexport const getProjectPostsRoute = (projectId: string) => {\n  return matchParams(routes.project.posts, { projectId });\n}\n\n/**\n * Route to create new post\n * @param projectId \n * @returns \n */\nexport const getProjectPostsNewRoute = (projectId: string) => {\n  return matchParams(routes.project.postNew, { projectId });\n}\n\n/**\n* Returm projest setting route\n * @param projectId \n * @returns \n */\nexport const getProjectSettingRoute = (projectId: string): string => {\n  return matchParams(routes.project.settings, { projectId });\n}\n\n/**\n* Returm projest setting route\n * @param projectId \n * @returns \n */\nexport const getProjectTeamRoute = (projectId: string): string => {\n  return matchParams(routes.project.team, { projectId });\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;;AACM,MAAM,SAAS;IACpB,SAAS;IAET,MAAM;QACJ,QAAQ;QACR,QAAQ;QACR,SAAS;QACT,gBAAgB;QAChB,aAAa;QACb,aAAa;QACb,eAAe;QACf,WAAW;IACb;IAEA,WAAW;IAEX,SAAS;QACP,UAAU;QACV,SAAS;QACT,KAAK;QACL,OAAO;QACP,SAAS;QACT,UAAU;QACV,MAAM;IAGR;AACF;AAMO,MAAM,eAAyB;IACpC,OAAO,OAAO;CACd;AAMK,MAAM,aAAuB;IAClC,OAAO,IAAI,CAAC,MAAM;IAClB,OAAO,IAAI,CAAC,MAAM;IAClB,OAAO,IAAI,CAAC,cAAc;IAC1B,OAAO,IAAI,CAAC,WAAW;IACvB,OAAO,IAAI,CAAC,WAAW;IACvB,OAAO,IAAI,CAAC,aAAa;IACzB,OAAO,IAAI,CAAC,SAAS;CACtB;AAMO,MAAM,gBAAwB;AAK9B,MAAM,yBAAyB,OAAO,SAAS;AAEvD;;;;;CAKC,GACD,MAAM,cAAc,CAAC,OAAe;IAClC,OAAO,OAAO,IAAI,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM;QACvC,MAAM,QAAQ,IAAI,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE;QACpC,OAAO,KAAK,OAAO,CAAC,OAAO,MAAM,CAAC,IAAI;IACxC,GAAG;AACL;AAOO,MAAM,kBAAkB,CAAC;IAC9B,OAAO,YAAY,OAAO,OAAO,CAAC,OAAO,EAAE;QAAE;IAAU;AACzD;AAOO,MAAM,uBAAuB,CAAC;IACnC,OAAO,YAAY,OAAO,OAAO,CAAC,KAAK,EAAE;QAAE;IAAU;AACvD;AAOO,MAAM,0BAA0B,CAAC;IACtC,OAAO,YAAY,OAAO,OAAO,CAAC,OAAO,EAAE;QAAE;IAAU;AACzD;AAOO,MAAM,yBAAyB,CAAC;IACrC,OAAO,YAAY,OAAO,OAAO,CAAC,QAAQ,EAAE;QAAE;IAAU;AAC1D;AAOO,MAAM,sBAAsB,CAAC;IAClC,OAAO,YAAY,OAAO,OAAO,CAAC,IAAI,EAAE;QAAE;IAAU;AACtD"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n  prisma = global.prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,IAAI,6HAAA,CAAA,eAAY;IAClC;IACA,SAAS,OAAO,MAAM;AACxB;uCAEe"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/services/template-service.ts"],"sourcesContent":["// @verify\n\nimport { readFile } from \"fs/promises\";\nimport * as path from \"path\";\n\ntype TemplateFileName = \"verification\" | \"reset-password\";\n\nexport class TemplateService {\n  private static readonly TEMPLATE_DIR = path.resolve(process.cwd(), \"modules/auth/services/templates\");\n\n  /**\n   * Retrieves and processes an HTML template file.\n   * @param fileName - The name of the template file (e.g., \"verification.html\").\n   * @param replacements - A record of key-value pairs to replace in the template.\n   * @returns The processed template string.\n   */\n  static async getTemplate(fileName: `${TemplateFileName}.html`, replacements: Record<string, string>): Promise<string> {\n    const filePath = path.join(TemplateService.TEMPLATE_DIR, fileName);\n    let template = await readFile(filePath, \"utf-8\");\n\n    for (const [key, value] of Object.entries(replacements)) {\n      const pattern = new RegExp(`{{${key}}}`, \"g\");\n      template = template.replace(pattern, value);\n    }\n\n    return template;\n  }\n}\n"],"names":[],"mappings":"AAAA,UAAU;;;;AAEV;AACA;;;AAIO,MAAM;IACX,OAAwB,eAAe,kGAAK,OAAO,CAAC,QAAQ,GAAG,IAAI,mCAAmC;IAEtG;;;;;GAKC,GACD,aAAa,YAAY,QAAoC,EAAE,YAAoC,EAAmB;QACpH,MAAM,WAAW,kGAAK,IAAI,CAAC,gBAAgB,YAAY,EAAE;QACzD,IAAI,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,WAAQ,AAAD,EAAE,UAAU;QAExC,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,cAAe;YACvD,MAAM,UAAU,IAAI,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;YACzC,WAAW,SAAS,OAAO,CAAC,SAAS;QACvC;QAEA,OAAO;IACT;AACF"}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/services/mail.sender.ts"],"sourcesContent":["// @verified\nimport nodemailer from \"nodemailer\";\nimport { TemplateService } from \"./template-service\";\n\nconst { GMAIL_SENDER_EMAIL, GMAIL_SENDER_PASSWORD } = process.env;\nconst CURRENT_YEAR = new Date().getFullYear().toString();\n\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      service: \"gmail\",\n      auth: {\n        user: GMAIL_SENDER_EMAIL,\n        pass: GMAIL_SENDER_PASSWORD,\n      },\n    });\n  }\n\n  /**\n   * Returns the Nodemailer transporter instance.\n   */\n  getTransport() {\n    return this.transporter;\n  }\n\n  /**\n   * Sends a reset password email using a template.\n   * @param email - Recipient's email address.\n   * @param verificationLink - The link to reset password.\n   */\n  async sendResetPasswordEmail(email: string, verificationLink: string): Promise<boolean> {\n    const template = await TemplateService.getTemplate(\"reset-password.html\", { verificationLink, year: CURRENT_YEAR });\n\n    return this.sendEmail(email, \"Resetting Password\", template);\n  }\n\n  /**\n   * Sends an email verification message using a template.\n   * @param email - Recipient's email address.\n   * @param verificationLink - The link to verify the email.\n   */\n  async sendVerificationEmail(email: string, verificationLink: string): Promise<boolean> {\n    const template = await TemplateService.getTemplate(\"verification.html\", { verificationLink, year: CURRENT_YEAR });\n\n    return this.sendEmail(email, \"Email Verification\", template, \"emailverification@yourapp.com\");\n  }\n\n  /**\n   * Generic method to send an email.\n   * @param to - Recipient email address.\n   * @param subject - Email subject.\n   * @param html - HTML content of the email.\n   * @param from - Sender email address (optional; defaults to configured Gmail sender).\n   */\n  private async sendEmail(to: string, subject: string, html: string, from = GMAIL_SENDER_EMAIL): Promise<boolean> {\n    const response = await this.transporter.sendMail({ from, to, subject, html });\n\n    return response.accepted.length > 0;\n  }\n}\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;AACA;;;AAEA,MAAM,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,GAAG,QAAQ,GAAG;AACjE,MAAM,eAAe,IAAI,OAAO,WAAW,GAAG,QAAQ;AAE/C,MAAM;IACH,YAAoC;IAE5C,aAAc;QACZ,IAAI,CAAC,WAAW,GAAG,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC5C,SAAS;YACT,MAAM;gBACJ,MAAM;gBACN,MAAM;YACR;QACF;IACF;IAEA;;GAEC,GACD,eAAe;QACb,OAAO,IAAI,CAAC,WAAW;IACzB;IAEA;;;;GAIC,GACD,MAAM,uBAAuB,KAAa,EAAE,gBAAwB,EAAoB;QACtF,MAAM,WAAW,MAAM,oJAAA,CAAA,kBAAe,CAAC,WAAW,CAAC,uBAAuB;YAAE;YAAkB,MAAM;QAAa;QAEjH,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,sBAAsB;IACrD;IAEA;;;;GAIC,GACD,MAAM,sBAAsB,KAAa,EAAE,gBAAwB,EAAoB;QACrF,MAAM,WAAW,MAAM,oJAAA,CAAA,kBAAe,CAAC,WAAW,CAAC,qBAAqB;YAAE;YAAkB,MAAM;QAAa;QAE/G,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,sBAAsB,UAAU;IAC/D;IAEA;;;;;;GAMC,GACD,MAAc,UAAU,EAAU,EAAE,OAAe,EAAE,IAAY,EAAE,OAAO,kBAAkB,EAAoB;QAC9G,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;YAAE;YAAM;YAAI;YAAS;QAAK;QAE3E,OAAO,SAAS,QAAQ,CAAC,MAAM,GAAG;IACpC;AACF"}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/constants.ts"],"sourcesContent":["\n// TODO\nexport const logoUrl = \"https://img.freepik.com/free-psd/engraved-black-logo-mockup_125540-223.jpg?size=626&ext=jpg&ga=GA1.1.358797363.1725023893&semt=ais_hybrid\";\n\nexport const HOST = process.env.HOST || \"http://localhost:3000\";\n\nexport const RECAPTCHA_SECRET = process.env.RECAPTCHA_SECRET;\n\nexport const recaptcha_config = {\n  sitekey : process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY || \"\",\n  secret : process.env.RECAPTCHA_SECRET,\n  project_id : \"\",\n}\n\n"],"names":[],"mappings":"AACA,OAAO;;;;;;;AACA,MAAM,UAAU;AAEhB,MAAM,OAAO,QAAQ,GAAG,CAAC,IAAI,IAAI;AAEjC,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;AAErD,MAAM,mBAAmB;IAC9B,SAAU,QAAQ,GAAG,CAAC,8BAA8B,IAAI;IACxD,QAAS,QAAQ,GAAG,CAAC,gBAAgB;IACrC,YAAa;AACf"}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/sendRequest.ts"],"sourcesContent":["import { NodemailerConfig } from \"next-auth/providers/nodemailer\";\nimport { EmailService } from \"./services/mail.sender\";\nimport { logoUrl } from \"@/modules/auth/constants\";\nimport prisma from \"@/lib/prisma\";\n\nexport interface EmailTheme {\n  colorScheme?: \"auto\" | \"dark\" | \"light\";\n  logo?: string;\n  brandColor?: string;\n  buttonText?: string;\n}\n\nexport async function sendVerificationRequest(params: {\n  identifier: string;\n  url: string;\n  expires: Date;\n  provider: NodemailerConfig;\n  token: string;\n  theme: EmailTheme;\n  request: Request;\n}) {\n \n  const { identifier, url, provider, theme } = params;\n  const { host } = new URL(url);\n  const service = new EmailService();\n  const transport =  service.getTransport();\n  await prisma.verificationToken.deleteMany({\n    where: {\n      identifier,\n      token: { not: params.token },\n    },\n  });\n  try {\n    const result = await transport.sendMail({\n      to: identifier,\n      from: provider.from,\n      subject: `Sign in to ${host}`,\n      text: generateText({ url, host }),\n      html: generateHTML({ url, host, theme }),\n    });\n\n    const failed = result.rejected.concat(result.pending).filter(Boolean);\n    if (failed.length) {\n      throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`);\n    }\n  } catch (error) {\n    console.error(\"Error sending verification email:\", error);\n    // throw error;\n  }\n}\nfunction generateHTML(params: { url: string; host: string; theme: EmailTheme }) {\n  const { url, host, theme } = params;\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\");\n\n  const brandColor = theme.brandColor || \"#4F46E5\"; // A modern shade of blue (indigo-600 from Tailwind)\n  const color = {\n    background: \"#f3f4f6\", // Slightly darker gray for better contrast\n    text: \"#333333\", // Darker text color for improved readability\n    mainBackground: \"#ffffff\",\n    buttonBackground: brandColor,\n    buttonBorder: brandColor,\n    buttonText: theme.buttonText || \"#ffffff\",\n    footerText: \"#9CA3AF\", // Neutral gray for footer text\n  };\n\n  return `\n    <body style=\"background: ${color.background}; margin: 0; padding: 0; font-family: Arial, sans-serif;\">\n      <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"background: ${color.background}; padding: 40px 0;\">\n        <tr>\n          <td align=\"center\">\n            <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"max-width: 600px; margin: auto; background: ${color.mainBackground}; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); overflow: hidden;\">\n              <tr>\n                <td align=\"center\" style=\"padding: 40px 0;\">\n                  ${`<img src=\"${theme?.logo || logoUrl}\" alt=\"${escapedHost}\" style=\"height: 50px; margin-bottom: 24px;\" />`}\n                  <h1 style=\"font-size: 24px; color: ${color.text}; margin: 0;\">Sign in to <strong>${escapedHost}</strong></h1>\n                </td>\n              </tr>\n              <tr>\n                <td align=\"center\" style=\"padding: 0 40px 40px;\">\n                  <p style=\"font-size: 16px; color: ${color.text}; margin: 0 0 24px;\">\n                    Click the button below to sign in. This link is only valid for the next 24 hours.\n                  </p>\n                  <a href=\"${url}\" target=\"_blank\"\n                    style=\"display: inline-block; padding: 14px 28px; font-size: 16px; color: ${color.buttonText}; background-color: ${color.buttonBackground}; border-radius: 6px; text-decoration: none; font-weight: bold; margin: 0 auto;\">\n                    Sign in\n                  </a>\n                </td>\n              </tr>\n              <tr>\n                <td align=\"center\" style=\"padding: 20px; font-size: 14px; color: ${color.footerText};\">\n                  If you did not request this email, you can safely ignore it.\n                </td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </body>\n  `;\n}\n\nfunction generateText({ url, host }: { url: string; host: string }) {\n  return `Sign in to ${host}\\n${url}\\n\\nIf you did not request this email, you can safely ignore it.\\nThis link is only valid for the next 24 hours.`;\n}\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AASO,eAAe,wBAAwB,MAQ7C;IAEC,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;IAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI;IACzB,MAAM,UAAU,IAAI,+IAAA,CAAA,eAAY;IAChC,MAAM,YAAa,QAAQ,YAAY;IACvC,MAAM,+GAAA,CAAA,UAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC;QACxC,OAAO;YACL;YACA,OAAO;gBAAE,KAAK,OAAO,KAAK;YAAC;QAC7B;IACF;IACA,IAAI;QACF,MAAM,SAAS,MAAM,UAAU,QAAQ,CAAC;YACtC,IAAI;YACJ,MAAM,SAAS,IAAI;YACnB,SAAS,CAAC,WAAW,EAAE,MAAM;YAC7B,MAAM,aAAa;gBAAE;gBAAK;YAAK;YAC/B,MAAM,aAAa;gBAAE;gBAAK;gBAAM;YAAM;QACxC;QAEA,MAAM,SAAS,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,OAAO,EAAE,MAAM,CAAC;QAC7D,IAAI,OAAO,MAAM,EAAE;YACjB,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,OAAO,IAAI,CAAC,MAAM,mBAAmB,CAAC;QACrE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;IACnD,eAAe;IACjB;AACF;AACA,SAAS,aAAa,MAAwD;IAC5E,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;IAC7B,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO;IAExC,MAAM,aAAa,MAAM,UAAU,IAAI,WAAW,oDAAoD;IACtG,MAAM,QAAQ;QACZ,YAAY;QACZ,MAAM;QACN,gBAAgB;QAChB,kBAAkB;QAClB,cAAc;QACd,YAAY,MAAM,UAAU,IAAI;QAChC,YAAY;IACd;IAEA,OAAO,CAAC;6BACmB,EAAE,MAAM,UAAU,CAAC;wFACwC,EAAE,MAAM,UAAU,CAAC;;;+HAGoB,EAAE,MAAM,cAAc,CAAC;;;kBAGpI,EAAE,CAAC,UAAU,EAAE,OAAO,QAAQ,8HAAA,CAAA,UAAO,CAAC,OAAO,EAAE,YAAY,+CAA+C,CAAC,CAAC;qDACzE,EAAE,MAAM,IAAI,CAAC,iCAAiC,EAAE,YAAY;;;;;oDAK7D,EAAE,MAAM,IAAI,CAAC;;;2BAGtC,EAAE,IAAI;8FAC6D,EAAE,MAAM,UAAU,CAAC,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;;;;;;iFAM7E,EAAE,MAAM,UAAU,CAAC;;;;;;;;;EASlG,CAAC;AACH;AAEA,SAAS,aAAa,EAAE,GAAG,EAAE,IAAI,EAAiC;IAChE,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,IAAI,gHAAgH,CAAC;AACrJ"}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/data/user.ts"],"sourcesContent":["import prisma from '@/lib/prisma';\n\nclass UserRepository {\n  async getUserByEmail(email: string) {\n    try {\n      return await prisma.user.findUnique({\n        where: { email },\n      });\n    } catch (error) {\n      console.error('Error fetching user by email:', error);\n      throw new Error('Could not fetch user by email');\n    }\n  }\n\n  async getUserById(id: string) {\n    try {\n      return await prisma.user.findUnique({\n        where: { id },\n      });\n    } catch (error) {\n      console.error('Error fetching user by ID:', error);\n      throw new Error('Could not fetch user by ID');\n    }\n  }\n  async verifyUserEmail(id : string){\n    await prisma.user.update({\n      where: { id },\n      data: {\n        emailVerified: new Date(),\n      },\n    });\n  }\n\n}\n\nconst userRepository = new UserRepository();\nexport default userRepository;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACJ,MAAM,eAAe,KAAa,EAAE;QAClC,IAAI;YACF,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE;gBAAM;YACjB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,YAAY,EAAU,EAAE;QAC5B,IAAI;YACF,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAClC,OAAO;oBAAE;gBAAG;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM,IAAI,MAAM;QAClB;IACF;IACA,MAAM,gBAAgB,EAAW,EAAC;QAChC,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,eAAe,IAAI;YACrB;QACF;IACF;AAEF;AAEA,MAAM,iBAAiB,IAAI;uCACZ"}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/auth.schema.ts"],"sourcesContent":["// @verified\nimport * as z from 'zod';\n\nconst emailSchema = z.string().email({ message: 'Please enter a valid email address' });\nconst passwordSchema = z.string().min(7, { message: 'Password is required' });\n\nexport const ForgotPasswordSchema = z.object({\n  email: emailSchema,\n});\n\nexport const ResetPasswordSchema = z\n  .object({\n    password: passwordSchema,\n    confirmPassword: passwordSchema,\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: ['confirmPassword'],\n  });\n\nexport const LoginSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, { message: 'Password is required' }),\n});\n\nexport const SignupSchema = z.object({\n  name: z.string(),\n  email: emailSchema,\n  password: passwordSchema,\n});\n\nexport const MagicSignInSchema = z.object({\n  email: emailSchema,\n});\n\nexport type MagicSignInType = z.infer<typeof MagicSignInSchema>;\nexport type ForgotPasswordSchemaType = z.infer<typeof ForgotPasswordSchema>;\nexport type LoginSchemaType = z.infer<typeof LoginSchema>;\nexport type SignupSchemaType = z.infer<typeof SignupSchema>;\nexport type ResetPasswordSchemaType = z.infer<typeof ResetPasswordSchema>;\n"],"names":[],"mappings":"AAAA,YAAY;;;;;;;;AACZ;;AAEA,MAAM,cAAc,uIAAE,MAAM,GAAG,KAAK,CAAC;IAAE,SAAS;AAAqC;AACrF,MAAM,iBAAiB,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG;IAAE,SAAS;AAAuB;AAEpE,MAAM,uBAAuB,uIAAE,MAAM,CAAC;IAC3C,OAAO;AACT;AAEO,MAAM,sBAAsB,uIAChC,MAAM,CAAC;IACN,UAAU;IACV,iBAAiB;AACnB,GACC,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IACxD,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAEK,MAAM,cAAc,uIAAE,MAAM,CAAC;IAClC,OAAO;IACP,UAAU,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAuB;AAChE;AAEO,MAAM,eAAe,uIAAE,MAAM,CAAC;IACnC,MAAM,uIAAE,MAAM;IACd,OAAO;IACP,UAAU;AACZ;AAEO,MAAM,oBAAoB,uIAAE,MAAM,CAAC;IACxC,OAAO;AACT"}},
    {"offset": {"line": 664, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/auth.config.ts"],"sourcesContent":["// @verified\nimport type { NextAuthConfig } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport Google from \"next-auth/providers/google\";\n\nimport { LoginSchema } from \"./auth.schema\";\nimport userRepository from \"./data/user\";\n\nexport default {\n  trustHost : true,\n  providers: [\n    Credentials({\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        const validate = await LoginSchema.parseAsync(credentials);\n\n        if (!validate) {\n          return null;\n        }\n\n        const { email, password } = validate;\n\n        const user = await userRepository.getUserByEmail(email);\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const matched = await bcrypt.compare(password, user.password);\n\n        if (matched) {\n          return user;\n        }\n\n        return null;\n      },\n    }),\n    Google({\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      clientId: process.env.GOOGLE_CLIENT_ID,\n    }),\n  ],\n} satisfies NextAuthConfig;\n\ntype ProvidersUsed = 'credentials' | 'google';\n\nexport type availableProviders = (ProvidersUsed)[number];\n"],"names":[],"mappings":"AAAA,YAAY;;;;AAEZ;AACA;AACA;AAEA;AACA;AALA;AAEA;;;;;;uCAKe;IACb,WAAY;IACZ,WAAW;QACT,CAAA,GAAA,4LAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,WAAW,MAAM,mIAAA,CAAA,cAAW,CAAC,UAAU,CAAC;gBAE9C,IAAI,CAAC,UAAU;oBACb,OAAO;gBACT;gBAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAE5B,MAAM,OAAO,MAAM,iIAAA,CAAA,UAAc,CAAC,cAAc,CAAC;gBAEjD,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;gBAE5D,IAAI,SAAS;oBACX,OAAO;gBACT;gBAEA,OAAO;YACT;QACF;QACA,CAAA,GAAA,uLAAA,CAAA,UAAM,AAAD,EAAE;YACL,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,UAAU,QAAQ,GAAG,CAAC,gBAAgB;QACxC;KACD;AACH"}},
    {"offset": {"line": 723, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 729, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/modules/auth/auth.ts"],"sourcesContent":["// @verified\nimport NextAuth from \"next-auth\";\n\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { UserRolesEnum } from \"@prisma/client\";\nimport { routes } from \"@/routes\";\nimport prisma from \"@/lib/prisma\";\n\nimport { sendVerificationRequest } from \"./sendRequest\";\nimport userRepository from \"./data/user\";\nimport authConfig from \"./auth.config\";\n\nexport const nextAuth = NextAuth({\n  pages: {\n    signIn: routes.auth.signIn,\n    verifyRequest: routes.auth.verifyRequest,\n    error: routes.auth.authError,\n    signOut: routes.auth.signOut,\n  },\n  events: {\n    linkAccount: async ({ user }) => {\n      if (!user.id) {\n        return;\n      }\n\n      await userRepository.verifyUserEmail(user.id)\n    },\n  },\n  callbacks: {\n    async signIn({ user, account }) {\n      const provider = account?.provider;\n\n      if (provider !== \"credentials\" && provider !== \"http-email\") {\n        return true;\n      }\n\n      if (!user || !user.id) {\n        return false;\n      }\n\n      const existingUser = await userRepository.getUserById(user.id);\n\n      if (\n        !existingUser ||\n        (provider === \"credentials\" && !existingUser.emailVerified)\n      ) {\n        return provider === \"http-email\" ? routes.auth.signUp : false;\n      }\n\n      return true;\n    },\n\n    //  jwt is called when the JWT is created\n    async jwt(jwt) {\n      const { token } = jwt;\n\n      if (!token.sub) {\n        return token;\n      }\n\n      const existingUser = await userRepository.getUserById(token.sub);\n\n      if (!existingUser) {\n        return token;\n      }\n\n      token.email = existingUser.email;\n      token.name = existingUser.name;\n      token.role = existingUser.role;\n\n      return token;\n    },\n    // session uses the JWT token to create and generate the session object\n    async session({ session, token }) {\n      if (session.user) {\n        if (token.role) session.user.role = token.role as UserRolesEnum;\n        if (token.sub) session.user.id = token.sub;\n        if (token.email) session.user.email = token.email;\n        if (token.name) session.user.name = token.name;\n        if (token.picture) session.user.image = token.picture;\n      }\n\n      return session;\n    },\n  },\n  adapter: PrismaAdapter(prisma),\n\n  session: { strategy: \"jwt\" },\n  trustHost: authConfig.trustHost,\n  \n  providers: [\n    ...authConfig.providers,\n    {\n      id: \"http-email\",\n      name: \"Email\",\n      sendVerificationRequest: sendVerificationRequest,\n      options: {},\n      maxAge: 60 * 60,\n      from: \"onboarding@contentstream.com\", // TODO\n      type: \"email\",\n    },\n  ],\n});\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;AAEA;AAEA;AACA;AAEA;AACA;AACA;AATA;;;;;;;;AAWO,MAAM,WAAW,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC/B,OAAO;QACL,QAAQ,wGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM;QAC1B,eAAe,wGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,aAAa;QACxC,OAAO,wGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS;QAC5B,SAAS,wGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,OAAO;IAC9B;IACA,QAAQ;QACN,aAAa,OAAO,EAAE,IAAI,EAAE;YAC1B,IAAI,CAAC,KAAK,EAAE,EAAE;gBACZ;YACF;YAEA,MAAM,iIAAA,CAAA,UAAc,CAAC,eAAe,CAAC,KAAK,EAAE;QAC9C;IACF;IACA,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,MAAM,WAAW,SAAS;YAE1B,IAAI,aAAa,iBAAiB,aAAa,cAAc;gBAC3D,OAAO;YACT;YAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE;gBACrB,OAAO;YACT;YAEA,MAAM,eAAe,MAAM,iIAAA,CAAA,UAAc,CAAC,WAAW,CAAC,KAAK,EAAE;YAE7D,IACE,CAAC,gBACA,aAAa,iBAAiB,CAAC,aAAa,aAAa,EAC1D;gBACA,OAAO,aAAa,eAAe,wGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,GAAG;YAC1D;YAEA,OAAO;QACT;QAEA,yCAAyC;QACzC,MAAM,KAAI,GAAG;YACX,MAAM,EAAE,KAAK,EAAE,GAAG;YAElB,IAAI,CAAC,MAAM,GAAG,EAAE;gBACd,OAAO;YACT;YAEA,MAAM,eAAe,MAAM,iIAAA,CAAA,UAAc,CAAC,WAAW,CAAC,MAAM,GAAG;YAE/D,IAAI,CAAC,cAAc;gBACjB,OAAO;YACT;YAEA,MAAM,KAAK,GAAG,aAAa,KAAK;YAChC,MAAM,IAAI,GAAG,aAAa,IAAI;YAC9B,MAAM,IAAI,GAAG,aAAa,IAAI;YAE9B,OAAO;QACT;QACA,uEAAuE;QACvE,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,IAAI,MAAM,IAAI,EAAE,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9C,IAAI,MAAM,GAAG,EAAE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC1C,IAAI,MAAM,KAAK,EAAE,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBACjD,IAAI,MAAM,IAAI,EAAE,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9C,IAAI,MAAM,OAAO,EAAE,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,OAAO;YACvD;YAEA,OAAO;QACT;IACF;IACA,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,UAAM;IAE7B,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW,mIAAA,CAAA,UAAU,CAAC,SAAS;IAE/B,WAAW;WACN,mIAAA,CAAA,UAAU,CAAC,SAAS;QACvB;YACE,IAAI;YACJ,MAAM;YACN,yBAAyB,gIAAA,CAAA,0BAAuB;YAChD,SAAS,CAAC;YACV,QAAQ,KAAK;YACb,MAAM;YACN,MAAM;QACR;KACD;AACH"}},
    {"offset": {"line": 823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 829, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/auth.ts"],"sourcesContent":["import { nextAuth } from \"./modules/auth/auth\";\n\nexport const { handlers, signIn, signOut, auth  } = nextAuth "],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAG,GAAG,yHAAA,CAAA,WAAQ"}},
    {"offset": {"line": 838, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 844, "column": 0}, "map": {"version":3,"sources":["file:///Users/tarasfedurko/Projects/teastify/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"@/auth\"\n\nexport const { GET, POST } = handlers"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,sGAAA,CAAA,WAAQ"}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}